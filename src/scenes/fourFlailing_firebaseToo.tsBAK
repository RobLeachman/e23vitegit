import 'phaser';

/*
import { initializeApp } from "firebase/app";
//import { getAnalytics } from "firebase/analytics";
import firebase from 'firebase/app';
import 'firebase/firestore';
//import firebaseConfig from './firebaseConfig.js';
import { getFirestore } from "firebase/firestore";
import { collection, addDoc } from "firebase/firestore"; 
*/
let swapSelect = { x: 2, y: 2 }

export class Four extends Phaser.Scene {
    art: Phaser.GameObjects.Image;
    frame: Phaser.GameObjects.Sprite;
    selected: Phaser.GameObjects.Sprite;
    selectMask: Phaser.GameObjects.Sprite;
    pieceFrame0: Phaser.GameObjects.Sprite;
    pieceFrame1: Phaser.GameObjects.Sprite;
    pieceFrame2: Phaser.GameObjects.Sprite;
    pieceFrame3: Phaser.GameObjects.Sprite;
    pieceFrame4: Phaser.GameObjects.Sprite;
    spriteNames: string[][] = [];




    backButton: Phaser.GameObjects.Sprite;
    /*
        firebaseConfig = {
            apiKey: "AIzaSyCXKLmBPEdmc-7J0M9BWuFN2e9RqGMUf-0",
            authDomain: "escape23-9c153.firebaseapp.com",
            projectId: "escape23-9c153",
            storageBucket: "escape23-9c153.appspot.com",
            messagingSenderId: "575545476353",
            appId: "1:575545476353:web:20671a688f62d9bb388700",
            measurementId: "G-G9X9NTNH1M"
        };
    */
    constructor() {
        super("Four");
    }

    preload() {
        this.load.image('art', 'assets/graphics/pg1a.webp');
        this.load.image('frame', 'assets/backgrounds/4x4 frame1a.webp');
        this.load.image('pieceFrame', 'assets/sprites/4x4 piece frame1a.png');
        this.load.image('pieceSelected', 'assets/sprites/pieceSelected.png');
        this.load.image('selectPieceMask', 'assets/sprites/selectPiecesMask.png');
        this.load.image('backButton', 'assets/sprites/arrowDown.webp');
        
        for (let i = 0; i < 4; i++) {
            this.spriteNames[i] = [];
            for (let j = 0; j < 4; j++) {
                this.spriteNames[i][j] = i + "-" + j;
                console.log("Load sprite " + this.spriteNames[i][j]);
                this.load.image(this.spriteNames[i][j], 'assets/graphics/pg1a-' + this.spriteNames[i][j] + '.png');
            }
        }

    }

    create() {
        this.frame = this.add.sprite(13, 170, 'frame').setOrigin(0, 0);

        this.art = this.add.sprite(13 + 28, 170 + 28, 'art').setOrigin(0, 0);
        this.art.setVisible(false)


        /* 
        //THESE WORK        
                const piece0 = this.make.graphics({x:0, y: 0, add: false});;
                piece0.fillStyle(0xffffff);
                piece0.beginPath();
                piece0.fillRect(13+28,170+28, 160,160);
                const mask0 = piece0.createGeometryMask();
                const art0 = this.add.image(13+28, 170+28, 'art').setOrigin(0,0);
                art0.setMask(mask0);
        
                const piece1 = this.make.graphics({x:0, y: 0, add: false});;
                piece1.fillStyle(0xffffff);
                piece1.beginPath();
                piece1.fillRect(13+28+160,170+28+160, 160, 160);
                const mask1 = piece1.createGeometryMask();        
                const art1 = this.add.image(13+28, 170+28, 'art').setOrigin(0,0);
                art1.setMask(mask1);
        */




        // each mask's X and Y coordinates
        // still struggling with TS arrays https://dpericich.medium.com/how-to-build-multi-type-multidimensional-arrays-in-typescript-a9550c9a688e
        /*
                const pieceN = this.make.graphics({x:0, y: 0, add: false});;
                piece1.fillStyle(0xffffff);
                piece1.beginPath();
                piece1.fillRect(13+28+160,170+28+160, 160, 160);
                const maskN = piece1.createGeometryMask();        
                const pN = this.art.setMask(mask1);
        */

        //let maskArray: [x:number, y:number, mask:Phaser.Display.Masks.GeometryMask][] = [[0,0,maskN],[0,1,maskN],[0,2,maskN],[1,0,maskN],[1,1,maskN],[1,2,maskN]];
        //let maskArray: [][] = [];
        /*        
                console.log("INIT");
               
                console.log(maskArray)
                let actions: [string, number, number, number, string][] = [["BOJ", 0, 0, 0, "scn"]];
        
                let rows: number = 3;
                let cols: number = 3;
                let arr: string[][] = [];
                for (let i = 0; i < rows; i++) {
                   arr[i] = [];
                   for (let j = 0; j < cols; j++) {
                      arr[i][j] = String.fromCharCode(65 + i) + (j + 1);
                   }
                }
                console.log("ARR")
                console.log(arr);
        
                let num:[number,number,string][] = [[1,2,"A"],[4,5,"B"],[7,8,"C"]]
                //let newNum = [2,4,"X"];
                //num.push(newNum);
                console.log("NUM");
                console.log(num);
        
        
                let spr:[number,number][] = [[0,0], [0,1], [0,2]];
                spr.push([1,0],[1,1], [1,2]);
                console.log("SPR")
                console.log(spr)
                console.log(spr[0][0])
                console.log(spr[1][0])
               
                let two:[][] =[];
                let profile: [string, number, boolean, number] = ['Kobe', 39, true, 150000];
                let profileObj = {x:0, y:0, z:"string"}
                let i=0;
                let j=0;
                let profileObject1 = {x:i, y:j, z:"string"}
                i=0;
                j=1;
                let profileObject2 = {x:i, y:j, z:"string"}
        */



        /*
        // create an array of tuples ... thank you debone :) 
        type Entry = [number, number, object];
        
        let entries:Entry[] = [ [1,2,{x:3}] ];
        for (let i=0;i<4;i++) {
            for (let j=0;j<4;j++) {
                const piece1 = this.make.graphics({x:0, y: 0, add: false});;
                const entry:Entry = [i,j,piece1];
                entries.push(entry);
            }
        }
        console.log("ENTRIES")
        console.log(entries)
        */
        //let entry:Entry = [4,5,{z:3}];




        const dictionaryViaMap = new Map();
        for (let i = 0; i < 4; i++) {
            for (let j = 0;j < 4; j++) {
            
                const piece1 = this.make.graphics({ x: 0, y: 0, add: false });
                piece1.fillStyle(0xffffff);
                piece1.beginPath();
                piece1.fillRect(13 + 28 + i * 160, 170 + 28 + j * 160, 160, 160);
                const mask1 = piece1.createGeometryMask();
            

                const spriteKey = i + "-" + j;
                console.log("Make sprite " + spriteKey)
                const artCopy = this.add.image(13 + 28+ i * 160, 170 + 28+ j * 160, this.spriteNames[j][i]).setOrigin(0, 0).setName(i + "-" + j);
                

                const k = i.toString() + ':' + j.toString();
                const v = { mask: mask1, art: this.spriteNames[i][j], origX: i, origY: j, offsetX: 0, offsetY: 0 };
                dictionaryViaMap.set(k, v);


                this.add.sprite((13 + 28) + i * 160, (170 + 28) + j * 160, 'pieceFrame').setOrigin(0, 0);
            }
        }
        


        // show all tiles, each copy of art masked by each copy of mask
        for (let i = 0; i < 4; i++) {
            for (let j = 0; j < 4; j++) {
                const k = i.toString() + ':' + j.toString();
                const artOut = dictionaryViaMap.get(k);
                const theArt = artOut.art;

                //theArt.setMask(artOut.mask);
                //theArt.setVisible(true)
            }
        }

        /*
                // dump the array        
                for (let i = 0; i < 4; i++) {
                    for (let j = 0; j < 4; j++) {
                        const k = i.toString() + ':' + j.toString();
                        const tile = dictionaryViaMap.get(k);                                
                        console.log(`dump ${i},${j}  orig ${tile.origX},${tile.origY}  offset ${tile.offsetX}, ${tile.offsetY}`)
                    }
                }
        */


        // initial selection -- probably better to leave this off when the game starts!!!!!
        this.selected = this.add.sprite(13 + 28 + 160 * swapSelect.x, 170 + 28 + 160 * swapSelect.y, 'pieceSelected').setOrigin(0, 0);

        // cover the whole board and then read the coordinates of the click
        this.selectMask = this.add.sprite(13 + 28, 170 + 28, 'selectPieceMask').setOrigin(0, 0).setDepth(1);
        //recorder.addMaskSprite('selectMask', selectMask); // don't forget to enable this in the real game!!!!!!

        this.selectMask.setVisible(true); this.selectMask.setDepth(1); this.selectMask.setInteractive({ cursor: 'pointer' });

        this.selectMask.on('pointerdown', (pointer: Phaser.Input.Pointer, x: number, y: number) => {
            const selection = { x: Math.floor(x / 160), y: Math.floor(y / 160) };
            console.log(`swap ${swapSelect.x},${swapSelect.y} with ${selection.x},${selection.y}`)

            // determine the delta in tile numbers
            const deltaX = selection.x - swapSelect.x;
            const deltaY = selection.y - swapSelect.y;
            //console.log(`delta ${deltaX} ${deltaY}`)

            // determine the delta for setOrigin
            const shiftX = -.25 * (deltaX);
            const shiftY = -.25 * (deltaY);
            //console.log(`selection offset ${shiftX},${shiftY}`)

            // shift the art on the selected tile
            const k = selection.x.toString() + ':' + selection.y.toString();
            console.log("Selected " + k);
            const selectedTile = dictionaryViaMap.get(k);
            //console.log(`selection was already shifted ${selectedTile.offsetX},${selectedTile.offsetY}`)            
            console.log("-->name " + selectedTile.art.name)
            selectedTile.art.setOrigin(shiftX, shiftY)

            // now do the same to tile previously selected
            const k1 = swapSelect.x.toString() + ':' + swapSelect.y.toString();
            console.log("Swapping " + k1);
            const swapTile = dictionaryViaMap.get(k1);

            const shiftX1 = -.25 * (deltaX) * -1;
            const shiftY1 = -.25 * (deltaY) * -1;
            //console.log(`swap offset ${shiftX1},${shiftY1}`)
            console.log("-->name " + swapTile.art.name)
            swapTile.art.setOrigin(shiftX1, shiftY1)

            const v1 = { mask: swapTile.mask, art: swapTile.art, origX: swapTile.origX, origY: swapTile.origY, offsetX: shiftX1, offsetY: shiftY1 };
            dictionaryViaMap.set(k, v1);

            const v = { mask: selectedTile.mask, art: selectedTile.art, origX: selectedTile.origX, origY: selectedTile.origY, offsetX: shiftX, offsetY: shiftY };
            dictionaryViaMap.set(k1, v);


            // dump the array
            for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    const k = i.toString() + ':' + j.toString();
                    const tile = dictionaryViaMap.get(k);
                    console.log(`dump ${i},${j}  orig ${tile.origX},${tile.origY}  offset ${tile.offsetX}, ${tile.offsetY}  name ${tile.art.name}`)
                }
            }



            // save and indicate the new selection

            this.selected.setX((13 + 28) + selection.x * 160)
            this.selected.setY((13 + 28 + 160) + selection.y * 160)
            swapSelect.x = selection.x;
            swapSelect.y = selection.y;
            console.log(`next swap ${swapSelect.x},${swapSelect.y}`)



            //const j = swapSelect.x.toString() + ':' + swapSelect.y.toString();
            //const swapTile = dictionaryViaMap.get(j);

            //dictionaryViaMap.set(j,swapTile);
            //let selectedArt = swapTile.art;
            //selectedArt.setVisible(false)





            //artSwap.setMask(artOut.mask);
            //artSwap.setVisible(false)


        });


        this.backButton = this.add.sprite(300, 875, 'backButton').setOrigin(0, 0);
        //this.backButton = this.add.sprite(300, 875, 'atlas', 'arrowDown.png').setOrigin(0, 0).setName("backButton");
        this.backButton.setVisible(true); this.backButton.setDepth(1); this.backButton.setInteractive({ cursor: 'pointer' });

        this.backButton.on('pointerdown', () => {
            console.log("Four back");
        });

        this.events.on('wake', () => {
            console.log("Four awakes")
        });

        /*        
                const app = initializeApp(this.firebaseConfig);
                const db = getFirestore(app);
        
                // Initialize Cloud Firestore through Firebase
                try {
                    const docRef = await addDoc(collection(db, "users"), {
                        first: "Ada",
                        last: "Lovelace",
                        born: 1815
                    });
                    console.log("Document written with ID: ", docRef.id);
                } catch (e) {
                    console.error("Error adding document: ", e);
                }
        */

    }

    update() {

    }
}
